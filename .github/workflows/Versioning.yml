# ############################################################
# Copyright (c) 2024 wsadza
# Released under the MIT license
# ------------------------------------------------------------
#
# This GitHub Actions workflow automates the process of 
# version bumping and releasing for your project. 
#
# ############################################################

name: "Versioning"

on:
  # Trigger minor on default ref;
  # Trigger patch on default ref;
  push:
    branches:
      - '*' 
    paths:
      - 'apps/**'
      - 'charts/**'

  # Trigger major on default ref;
  workflow_dispatch:

jobs:

# ------------------------------------------------------------
#    _____     __         __     __    ______         
#   / ___/__ _/ /_____ __/ /__ _/ /___/_  __/__ ____ _
#  / /__/ _ `/ / __/ // / / _ `/ __/ -_) / / _ `/ _ `/
#  \___/\_,_/_/\__/\_,_/_/\_,_/\__/\__/_/  \_,_/\_, / 
#                                              /___/  
# Name:
#   CalculateTag 
#
# Description:
#   Job determines the next semantic version based on the type of change (major, minor, or patch),
#   and sets it as an output for the subsequent job.
#
# Jobs:
#   - Major Version (X.0.0): Triggered manually via workflow_dispatch on the default branch.
#   - Minor Version (0.X.0): Triggered by a push event on the default branch.
#   - Patch Version (0.0.X): Triggered by a push event to a branch starting with fix/ and ending with .x.

  CalculateTag:
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.outputsemver.outputs.NEXT_VERSION }}

    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'Semver: Major'
      # Restrict to manual startup; 
      # Restrict to default branch;
      if: ${{ 
            (github.event_name == 'workflow_dispatch' && github.actor) && 
            (always() && (format( 'refs/heads/{0}', github.event.repository.default_branch) == github.ref)) 
          }}
      run: |
        CURRENT_VERSION=$(git ls-remote --tags --sort="v:refname" | tail -n1 | sed 's/.*\///; s/\^{}//' );
        NEXT_VERSION="$(docker run alpine/semver semver -c -i major ${CURRENT_VERSION:=0.0.0})";
        echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV;

    - name: 'Semver: Minor'
      # Restrict to push startup; 
      # Restrict to default branch;
      if: ${{ 
          (github.event_name == 'push') && 
          (always() && (format( 'refs/heads/{0}', github.event.repository.default_branch) == github.ref)) 
          }}
      run: |
        REMOTE_VERSION=$(git ls-remote --tags --sort="v:refname" | tail -n1 | sed 's/.*\///; s/\^{}//' );
        CURRENT_VERSION="${REMOTE_VERSION:=0.0.0}"
        NEXT_VERSION="$(docker run alpine/semver semver -c -i minor ${CURRENT_VERSION})";
        echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV;

    - name: 'Semver: Patch'
      # Restrict to the fix branch; 
      if: ${{ 
          startsWith(github.ref, 'refs/heads/fix/') && endsWith(github.ref, '.x') 
          }}
      run: |
        GITHUB_REF=${GITHUB_REF//*\/}
        CURRENT_VERSION="$( git ls-remote -q --tags | awk -F/ '{ print $3}' | sort -Vr | grep "^${GITHUB_REF//.x}" | head -n1)";
        NEXT_VERSION="$(docker run alpine/semver semver -c -i patch ${CURRENT_VERSION})"
        echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV;

    - name: 'Output: Semver'
      id: outputsemver
      run: |
        echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT

# ------------------------------------------------------------
#    ___      __                
#   / _ \___ / /__ ___ ____ ___ 
#  / , _/ -_) / -_) _ `(_-</ -_)
# /_/|_|\__/_/\__/\_,_/___/\__/ 
#                               
# Name: 
#   Release
#
# Description:
#   Job uses the version determined by BumpVersion to update the Helm chart version, 
#   create a new Git tag, and push the changes to the repository.
#
# Jobs:
#   - Bump Helm: Updates the Helm chart version in Chart.yaml files.
#   - Release Tag: Creates and pushes a new Git tag with the bumped version.
#   - Release Commit: Amends the commit message to include the new version and skips CI.

  Release:
    name: "Release"
    runs-on: ubuntu-latest
    needs: 
    - CalculateTag

    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.token }}

    - name: 'Bump: Helm Charts'
      run: |
        NEXT_VERSION=${{ needs.CalculateTag.outputs.NEXT_VERSION }}
        echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
        find charts/ -type f -name "Chart.yaml" -exec yq eval ".version = \"${NEXT_VERSION}\"" -i {} \;
        git config user.name "${{ github.actor }}"
        git config user.email "${{ secrets.actor_mail }}"
        git add . 
        git commit -m "Bump Helm version to ${NEXT_VERSION}"

    - name: 'Release: Tag'
      run: |
        git tag ${NEXT_VERSION};
        git push --tags origin;

    - name: 'Release: Commit'
      run: |
        git pull
        git commit --amend -m "Bump Helm version to ${NEXT_VERSION} / [skip ci]"
        git push

